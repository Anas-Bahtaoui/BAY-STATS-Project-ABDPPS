library(ggplot2)
mu.post.mc <- data.frame(length = mu.post.mc)
mu1.post.mc <- data.frame(length = mu1.post.mc)
mu.post.mc$k <- '0.1'
mu1.post.mc$k <- '1'
mu_post <- rbind(mu.post.mc, mu1.post.mc)
ggplot(mu_post, aes(length, fill = k)) +
geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity')
## k = 0.1
k <- 0.1
c <- 2  # Should be >1
d <- 2
mu_0 <- 0
n <- 10000
tau.mc <- rgamma(n, c,  d)
mu.prior.mc <- rnorm(n, mu_0,  1/k)
y.mc <- rnorm(n, mu.prior.mc,  1/tau.mc)
c_n <- c + n/2
mu_n <- (k*mu_0+n*mean(y.mc))/(k+n)
d_n <- d + 0.5*sum((y.mc-mean(y.mc))^2)
mu.post.mc <- rt(n, df = 2*c_n, ncp = sqrt(d_n/(c_n*(n+k)))) + mu_n  #traslation
hist(mu.post.mc)
## k = 1
k <- 1
tau.mc <- rgamma(n, c,  d)
mu.prior.mc <- rnorm(n, mu_0,  1/k)
y.mc <- rnorm(n, mu.prior.mc,  1/tau.mc)
c_n <- c + n/2
mu_n <- (k*mu_0+n*mean(y.mc))/(k+n)
d_n <- d + 0.5*sum((y.mc-mean(y.mc))^2)
mu1.post.mc <- rt(n, df = 2*c_n, ncp = sqrt(d_n/(c_n*(n+k)))) + mu_n  #traslation
hist(mu1.post.mc)
library(ggplot2)
mu.post.mc <- data.frame(length = mu.post.mc)
mu1.post.mc <- data.frame(length = mu1.post.mc)
mu.post.mc$k <- '0.1'
mu1.post.mc$k <- '1'
mu_post <- rbind(mu.post.mc, mu1.post.mc)
ggplot(mu_post, aes(length, fill = k)) +
geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity')
#####  Homework  #####################################
# Simulate 10K MC draws from t distribution, k = 0.1 or 1
# Augmentation trick: tau ~ Ga(c,d), mu | tau ~ N(mu_0, 1/k) where k = k_tau
# Target: Mu marginal -> Plots
# Y ~ N(mu,1/tau)
# t is the posterior of mu t(2*c_n, mu_n, sqrt(d_n/c_n(n+k)))
# c_n = c + n/2
# mu_n = (k*mu_0+n*y_bar)/(k+n)
# d_n = d + 0.5*sum((y-y_bar)^2)
#(k = 0.1)####
#Parameters
k <- 0.1 # Or 1
c <- 2  # Should be >1
d <- 2
mu_0 <- 0
n <- 10000
# Steps:
# 1- Sample from tau ~ Gamma
tau.mc <- rgamma(n, c, d)
# 2- Simulate mu ~ Normal
mu.prior.mc <- rnorm(n, mu_0, 1/k)
# 3- Simulate Y ~ Normal
y.mc <- rnorm(n, mu.prior.mc,  1/tau.mc)
# 4- Get the _n values
c_n <- c + n/2
mu_n <- (k*mu_0+n*mean(y.mc))/(k+n)
d_n <- d + 0.5*sum((y.mc-mean(y.mc))^2) + 0.5*((n*k)/(k+n)*(mu_0-mean(y.mc))^2)
# 5- Simulate the marginal posterior ~ t
mu.post.mc <- rt(n, df = 2*c_n, ncp = sqrt(d_n/(c_n*(n+k))))
# 6- Plot the histogram
hist(mu.post.mc)
#(k = 1)####
# Now the same for k = 1
#Parameters
k <- 1
c <- 2  # Should be >1
d <- 2
mu_0 <- 0
n <- 10000
# Steps:
# 1- Sample from tau ~ Gamma
tau.mc <- rgamma(n, c, d)
# 2- Simulate mu ~ Normal
mu.prior.mc <- rnorm(n, mu_0, 1/k)
# 3- Simulate Y ~ Normal
y.mc <- rnorm(n, mu.prior.mc,  1/tau.mc)
# 4- Get the _n values
c_n <- c + n/2
mu_n <- (k*mu_0+n*mean(y.mc))/(k+n)
d_n <- d + 0.5*sum((y.mc-mean(y.mc))^2) + 0.5*((n*k)/(k+n)*(mu_0-mean(y.mc))^2)
# 5- Simulate the marginal posterior ~ t
muOne.post.mc <- rt(n, df = 2*c_n, ncp = sqrt(d_n/(c_n*(n+k))))
# 6- Plot the Histogramm
hist(muOne.post.mc)
# Plot both Histograms together ####
library(ggplot2)
mu.post.mc <- data.frame(length = mu.post.mc)
muOne.post.mc <- data.frame(length = mu1.post.mc)
mu.post.mc$k <- '0.1'
muOne.post.mc$k <- '1'
mu_post <- rbind(mu.post.mc, muOne.post.mc)
ggplot(mu_post, aes(length, fill = k)) +
geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity')
library(ggplot2)
mu.post.mc <- data.frame(length = mu.post.mc)
muOne.post.mc <- data.frame(length = muOne.post.mc)
mu.post.mc$k <- '0.1'
muOne.post.mc$k <- '1'
mu_post <- rbind(mu.post.mc, muOne.post.mc)
ggplot(mu_post, aes(length, fill = k)) +
geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity')
library(ggplot2)
mu.post.mc <- data.frame(length = mu.post.mc)
muOne.post.mc <- data.frame(length = muOne.post.mc)
mu.post.mc$k <- '0.1'
muOne.post.mc$k <- '1'
mu_post <- rbind(mu.post.mc, muOne.post.mc)
k <- 0.1 # Or 1
c <- 2  # Should be >1
d <- 2
mu_0 <- 0
n <- 10000
# Steps:
# 1- Sample from tau ~ Gamma
tau.mc <- rgamma(n, c, d)
# 2- Simulate mu ~ Normal
mu.prior.mc <- rnorm(n, mu_0, 1/k)
# 3- Simulate Y ~ Normal
y.mc <- rnorm(n, mu.prior.mc,  1/tau.mc)
# 4- Get the _n values
c_n <- c + n/2
mu_n <- (k*mu_0+n*mean(y.mc))/(k+n)
d_n <- d + 0.5*sum((y.mc-mean(y.mc))^2) + 0.5*((n*k)/(k+n)*(mu_0-mean(y.mc))^2)
# 5- Simulate the marginal posterior ~ t
mu.post.mc <- rt(n, df = 2*c_n, ncp = sqrt(d_n/(c_n*(n+k))))
#Parameters
k <- 1
c <- 2  # Should be >1
d <- 2
mu_0 <- 0
n <- 10000
# Steps:
# 1- Sample from tau ~ Gamma
tau.mc <- rgamma(n, c, d)
# 2- Simulate mu ~ Normal
mu.prior.mc <- rnorm(n, mu_0, 1/k)
# 3- Simulate Y ~ Normal
y.mc <- rnorm(n, mu.prior.mc,  1/tau.mc)
# 4- Get the _n values
c_n <- c + n/2
mu_n <- (k*mu_0+n*mean(y.mc))/(k+n)
d_n <- d + 0.5*sum((y.mc-mean(y.mc))^2) + 0.5*((n*k)/(k+n)*(mu_0-mean(y.mc))^2)
# 5- Simulate the marginal posterior ~ t
muOne.post.mc <- rt(n, df = 2*c_n, ncp = sqrt(d_n/(c_n*(n+k))))
library(ggplot2)
mu.post.mc <- data.frame(length = mu.post.mc)
muOne.post.mc <- data.frame(length = muOne.post.mc)
mu.post.mc$k <- '0.1'
muOne.post.mc$k <- '1'
mu_post <- rbind(mu.post.mc, muOne.post.mc)
ggplot(mu_post, aes(length, fill = k)) +
geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity')
library(BDgraph)
rgwish()
? rgwish
# ... and I give you an updated K
# ... and I give you an updated K
#INPUT:
'
n	- The number of samples required.
adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
#INPUT:
#INPUT:
#n	- The number of samples required.
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
adj <- read.csv(file = 'adj.csv')
adj <- read.csv("adj.csv")
adj <- read.csv("adj.csv")
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv")
print(data)
print(adj)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv")
print(adj)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- Matrix.read("adj.csv")
print(adj)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv")
print(adj)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(adj)
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
detach("package:BDgraph", unload = TRUE)
library(BDgraph)
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
adjj <- matrix( c( 0, 0, 1, 0, 0, 0, 1, 0, 0 ), 3, 3 )
print(adjj)
matrix( c(adj))
print(adj)
?rgwish
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
sample <- rgwish( n = 1, adjj = adj, b = 3, D = diag( 3 ) )
sample <- rgwish( n = 1, adjj = adjj, b = 3, D = diag( 3 ) )
sample <- rgwish( n = 1, adj = adjj, b = 3, D = diag( 3 ) )
View(adjj)
View(adj)
View(adjj)
View(adj)
View(sample)
View(adjj)
View(adj)
View(adjj)
View(adj)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
matrix( c(adj))
print(adj)
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
adjj <- matrix( c( 0, 0, 1, 0, 0, 0, 1, 0, 0 ), 3, 3 )
print(type(adjj))
adjj <- matrix( c( 0, 0, 1, 0, 0, 0, 1, 0, 0 ), 3, 3 )
print(typeof(adjj))
adj <- read.csv("adj.csv", header=FALSE)
matrix( c(adj))
print(typeof(adj))
install.packages("csvread")
library(csvread)
adj <- csvread("adj.csv", double, header=FALSE)
matrix( c(adj))
print(typeof(adj))
adj <- csvread("adj.csv", double, header=FALSE)
matrix( c(adj))
print(typeof(adj))
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adjj <- matrix( c( 0, 0, 1, 0, 0, 0, 1, 0, 0 ), 3, 3 )
print(typeof(adjj))
View(adjj)
View(adj)
View(adjj)
View(adjj)
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
= adj, b = 3, D = diag( 3 ) )
round( sample, 2 )
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(x, file = "gwish.csv", row.names = FALSE)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE, col.names = FALSE)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE, col.names = FALSE)
View(output)
View(adj)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE, col.names = FALSE)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE, col.names = NA)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names != FALSE, col.names = NA)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE)
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = 3, D = diag( 3 ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE)
? rgwish
dim(adj)
dim(adj)[0]
dim(adj)[0]
dim(adj)
dim(adj)
dim = dim(adj)
dim[0]
dim[1]
dim = dim(adj)[1]
dim = dim(adj)[1]
dim = dim(adj)
dim = dim[1]
dim = dim(adj)
dim = dim[1]
dim = dim(adj)
b = dim[1]
typeof(b)
b = dim[1]-1
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
adj <- read.csv("adj.csv", header=FALSE)
print(typeof(adj))
adj = data.matrix(adj)
print(typeof(adj))
dim = dim(adj)
b = dim[1]-1
#INPUT:
#n	- The number of samples required.
#adj	- The adjacency matrix corresponding to the graph structure which can be non-decomposable or decomposable. It should be an upper triangular matrix in which a_{ij}=1 if there is a link between notes i and j, otherwise a_{ij}=0. adj could be an object of class "graph", from function graph.sim. It also could be an object of class "sim", from function bdgraph.sim. It also could be an object of class "bdgraph", from functions bdgraph.mpl or bdgraph.
#b	- The degree of freedom for G-Wishart distribution, W_G(b, D).
#D	- The positive definite (p \times p) "scale" matrix for G-Wishart distribution, W_G(b, D). The default is an identity matrix.
#threshold	 -The threshold value for the convergence of sampling algorithm from G-Wishart'.
sample <- rgwish( n = 1, adj = adj, b = b, D = diag( b ) )
output <- round( sample, 2 )
write.csv(output, file = "gwish.csv", row.names = FALSE)
#Working directory setup
print(getwd())
setwd("/Users/caspar/Desktop/Bayesian Project/BAY-STATS-Project-ABDPPS")
#Read the adjacency from the input csv file (adj.csv)
adj <- read.csv("adj.csv", header=FALSE)
adj = data.matrix(adj)
#Calculate b=k-1
dim = dim(adj)
b = dim[1]-1
#Call rgwish
sample <- rgwish( n = 1, adj = adj, b = b, D = diag( b ) )
#Round to two decimals
output <- round( sample, 2 )
#Write the result in the output file (gwish.csv)
write.table(output, file = "gwish.csv", row.names = FALSE, col.names = FALSE)
